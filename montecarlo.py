"""
Monte Carlo Algorithm
Author: Kiana Hosaka
Credits: Based on code on p.78 Miller and Ranum text.
Description: Approximate pi using Monte Carlo algorithm that will display
the simulation. Compare the result of this algorithm with the Python math.pi result.
"""

from turtle import *
import math
import random

def drawBoard():
    """
    () -> None
    Draws the dartboard.
    >>> drawBoard():
    *displays blank screen*
    """
    # Create window
    window = Screen()
    window.setworldcoordinates(-2, -2, 2, 2)

    # Draw
    speed(0); hideturtle()
    penup()
    goto(-1, 0)
    pendown()
    goto(1, 0)
    penup()
    goto(0, 1)
    pendown()
    goto(0, -1)
    penup()
    goto(0, -1)

    return None

def isInCircle(x, y, r):
    """
    (num, num, num) -> bool
    Checks whether or not the input point is insde of the circle. 
    Returns True or False.
    >>> isInCircle(0, 0, 1)
    True
    >>> isInCircle(.5, .5, 1)
    True
    >>> isInCircle(1, 2, 1)
    False
    """
    r = math.sqrt(x**2 + y**2)
    if r <= 1:
        return True
    else:
        return False

def reportPi(numDarts, approxPi):
    """
    (int, float) -> None
    Computes and prints difference between approximate value for
    pi generated by the Monte Carlo algorithm and the math.pi value from
    the math library. Returns None.
    >>> reportPi(10, 3.2)
    With 10 iterations:
    My approximate value for pi is: 3.2
    math lib pi value is: 3.141592653589793
    This is a 1.86 percent error
    """
    perror = abs((math.pi - approxPi) / math.pi * 100)
    rounded_error = round(perror, 2)

    print("With", numDarts, "iterations:")
    print("My approximate value for pi is:", approxPi)
    print("math lib pi value is:", math.pi)
    print("This is a", rounded_error, "percent error")

    return None

def showMontePi(numDarts):
    '''
    (int) -> float
    Draws graphic animation of algorithm, calculates approximate pi,
    and prints report. Returns approximation of pi. Because we are
    returning approxPi, approxPi will again be printed after the report because
    we printed in main.
    Because we are implementing the random element, the examples of functions
    may not be replicable.
    >>> showMontePi(10):
    *graphics*
    With 10 iterations:
    My approximate value for pi is: 3.2
    math lib pi value is: 3.141592653589793
    This is a 1.86 percent error
    3.2
    '''
    drawBoard()
    inCircleCt = 0

    for i in range(numDarts):
        x = random.random()
        y = random.random()
        d = math.sqrt(x**2 + y**2)
        
        # Blue if in circle, red if not in circle
        if isInCircle(x, y, 1):
            inCircleCt = inCircleCt + 1
            color('blue')
        else:
            color('red')

        goto(x, y)
        dot()

    # Approximates pi using Monte Carlo algorithm and report difference
    approxPi = inCircleCt/numDarts * 4
    reportPi(numDarts, approxPi)
    # window.exitonclick()

    return approxPi


def main():
    """
    () -> None
    Top level function that calls showMontePi. Chose to print showMontePi.
    Returns None. 
    """
    print(showMontePi(1000))
    
    return None

main()
